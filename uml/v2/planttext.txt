@startuml

title Classes - Inheritance and composition

abstract class Employee{
    id: int
    name: String
    Employee(id, name)
    +{abstract}calculate_payroll()
}

class DisgruntledEmployee{
    id: int
    name: String
    +calculate_payroll()
}

class SalaryEmployee{
    weekly_salary: float
    SalaryEmployee(id, name, weekly_salary)
    +calculate_payroll(): float
}

class HourlyEmployee{
    hours_worked: int
    hour_rate: float
    HourlyEmployee(id, name, hours_worked, hour_rate)
    +calculate_payroll(): float
}

class CommissionEmployee{
    commission: int
    CommissionEmployee(id, name, weekly_salary, commission)
    +calculate_payroll(): float
}

class PayrollSystem{
    +calculate_payroll(employees: List<object>): void
}

Employee <|-- SalaryEmployee
Employee <|-- HourlyEmployee
SalaryEmployee <|-- CommissionEmployee
PayrollSystem ..> Employee
PayrollSystem ..> DisgruntledEmployee

note right of PayrollSystem::calculate_payroll
  <b>Polymorphic by default</b> 
  The objects added on the list employees
  must be have an interface with id, name and
  calculate_payroll method without params and no
  return value.
end note

@enduml